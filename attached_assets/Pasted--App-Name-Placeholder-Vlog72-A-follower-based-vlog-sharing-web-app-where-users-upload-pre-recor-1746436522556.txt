ðŸŸ¡ App Name (Placeholder: Vlog72)
A follower-based vlog-sharing web app where users upload pre-recorded videos to their own YouTube accounts (as "unlisted") via OAuth. These videos are then embedded in a private, follower-only feed and automatically expire after 72 hours, promoting timely, authentic storytelling. The app avoids hosting video files directly and focuses on providing a simple, elegant social layer. Everything is built with TypeScript for full type safety across the stack.

âœ… Core Features
Google OAuth login using YouTube scopes for direct upload to user accounts.

Uploads handled via YouTube Data API v3, with metadata stored in your own database.

Follower-only feed displaying embedded YouTube videos.

Video expiration system hides vlogs after 72 hours automatically.

No in-app camera/recording â€” users upload edited/pre-recorded vlogs only.

YouTube embed player for consistent playback across devices.

Mobile-friendly UI, fast feed navigation, simple interactions (like reactions or lightweight comments).

ðŸ§° Tech Stack (with TypeScript & VPS Hosting)
Frontend
Framework: Next.js (in custom server mode)

Language: TypeScript

Styling: Tailwind CSS

Auth: NextAuth.js with Google OAuth

Video Embeds: YouTube iframe API

Backend / Server
Node.js + TypeScript

Framework: API routes in Next.js or Express (if decoupled backend needed later)

YouTube API: googleapis Node.js SDK with full TypeScript types

Scheduling Jobs: node-cron, bree, or system-level crontab

Type Safety: End-to-end validation with zod or valibot

Database
PostgreSQL (self-hosted or managed like Supabase/Neon)

ORM: Prisma (Type-safe, auto-generates types from your schema)

Hosting & Ops
Hosting: Self-hosted on your VPS

Process Manager: PM2 or Docker

Reverse Proxy: Nginx or Caddy

SSL: Letâ€™s Encrypt (via Certbot or Caddy)

Environment Management: .env files, dotenv-safe, or secrets manager

ðŸ”’ Type Safety Highlights
âœ… TypeScript across all layers (frontend, backend, database access)

âœ… Prisma auto-generates types from the DB schema

âœ… Zod/Valibot used for request validation (input/output of API routes)

âœ… Shared types via a central types/ directory (e.g., VideoMeta, User, FollowerEdge)

âœ… No any types or unsafe casting in final code